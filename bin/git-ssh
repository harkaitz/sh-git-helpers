#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2023 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 [-s SECT][-S][-r SSH][-v] COMMAND OPTS...
#h:
#h: Manage a git repository in a remote SSH machine.
#h:
#h: ... show            : Show configuration.
#h: ... i|install       : Install GIT.
#h: ... l|list          : List repositories.
#h: ... n|new [NAME]    : Create repository with name.
#h: ... d|del NAME      : Delete repository.
#h: ... r|remote [NAME] : Set remote.
#h: ... c|clone NAME    : Clone project.
#h: ... u|url [NAME]    : Calculate URL.
##:
git_ssh() {
    local OPTIND optopt
    ## Parse command line arguments.
    while getopts "s:r:" optopt; do
        case $optopt in
            s)  local GIT_SSH_SECT="$OPTARG";;
            S)  local GIT_SSH_SECT="pub";;
            r)  local GIT_SSH="$OPTARG";;
            v)  local VERBOSE="y";;
            \?) return 1;;
        esac
    done
    shift $(( OPTIND - 1 ))
    ## Calculate variables.
    local GIT_SSH_HOST="`echo "${GIT_SSH_REPO}" | sed 's|:.*||'     `"
    local GIT_SSH_HOST="${GIT_SSH_HOST:-localhost}"
    local GIT_SSH_PATH="`echo "${GIT_SSH_REPO}" | sed -n 's|^[^:]*:||' `"
    local GIT_SSH_PATH="${GIT_SSH_PATH:-/git}"
    local GIT_SSH_SECT="${GIT_SSH_SECT:-priv}"
    local GIT_WORKDIR="${GIT_WORKDIR:-${HOME}/Projects}"
    local GIT_ALIAS="${GIT_ALIAS:-efferox.com}"
    ## Show variables.
    if test @"${1:-show}" = @"show"; then
        cat <<-EOF
	GIT_SSH_REPO : $GIT_SSH_REPO
	GIT_SSH_SECT : $GIT_SSH_SECT
	'-> GIT_SSH_HOST : $GIT_SSH_HOST
	'-> GIT_SSH_PATH : $GIT_SSH_PATH
	'-> Final path   : $GIT_SSH_PATH/$GIT_SSH_SECT
	GIT_WORKDIR  : $GIT_WORKDIR
	GIT_ALIAS    : $GIT_ALIAS
	EOF
        return 0
    fi
    ## Commands.
    local cmd="$1"
    shift
    case "$cmd" in
        i|install) git_ssh_install  ;;
        l|list)    git_ssh_list     ;;
        n|new)     git_ssh_new "$@" ;;
        d|del)     git_ssh_del "$@" ;;
        r|remote)  git_ssh_remote "$@" ;;
        c|clone)   git_ssh_clone  "$@" ;;
        u|url)     git_ssh_url    "$@" ;;
        *)         error "Invalid argument: $cmd"; return 1;;
    esac   
}
## --------------------------------------------------------------------------
git_ssh_install() {
    git_ssh_run '
        info "Installing git ..."
        if test -f /usr/bin/git;then
            true
        elif test -f /usr/bin/yum;then
            sudo yum -y install git
        elif test -f /usr/sbin/pkg;then
            sudo pkg install --yes git
        else
            error "Please install GIT manually."
            exit 1
        fi
        info "Creating $d ($u) ..."
        sudo mkdir -p "$d"
        sudo chown -R "$u:$u" "$d"
        '
    git config --global \
        url."${GIT_SSH_HOST}:${GIT_SSH_PATH}/${GIT_SSH_SECT}".insteadOf \
        'https://$GIT_ALIAS/git'
}
git_ssh_list() {
    git_ssh_run '
    if test -d "$d"; then
        for n in `find "$d" -type d -iregex ".*\\.git\$"`; do
            basename "$n" .git
        done 
    fi
    '
}
git_ssh_new() {
    local n="${1:-`pwd | xargs basename`}"
    if test ! -n "$n"; then
        error "Please specify a repository name."
        return 1
    fi
    git_ssh_run "n='$n'"'
    if test -d "${d}/${n}.git";then
        info "Directory ${d}/${n}.git exists."
        exit 0
    fi
    vrun git init --bare "${d}/${n}.git"
    '
}
git_ssh_del() {
    if test ! -n "$1"; then
        error "Please specify a repository name."
        return 1
    fi
    git_ssh_run "n='$1'"'
    if test ! -d "${d}/${n}.git";then exit 0; fi
    vrun mv "${d}/${n}.git" "${d}/${n}.git.`date +%Y%m%d`"
    '
}
git_ssh_remote() {
    local n="${1:-`pwd | xargs basename`}"
    if test ! -n "$n"; then
        error "Please specify a repository name."
        return 1
    elif test ! -e ".git"; then
        error "Not a git repository."
        return 1
    fi
    local u="$GIT_SSH_HOST:$GIT_SSH_PATH/$GIT_SSH_SECT/$n.git"
    vrun git remote add origin "$u"
}
git_ssh_clone() {
    if test ! -n "$1"; then
        error "Please specify a repository name."
        return 1
    fi
    local u="$GIT_SSH_HOST:$GIT_SSH_PATH/$GIT_SSH_SECT/$1.git"
    local d="$GIT_WORKDIR/$1"
    vrun git clone "$u" "$d"
}
git_ssh_url() (
    echo "$GIT_SSH_HOST:$GIT_SSH_PATH/$GIT_SSH_SECT/${1:-`pwd | xargs basename`}.git"
)
## --------------------------------------------------------------------------
git_ssh_run() {
    local cmd="
    set -e
    u=\`whoami\`
    d=$GIT_SSH_PATH/$GIT_SSH_SECT
    error() { echo \"\`uname -n\`: ERR: \$*\" >&2; }
    info()  { echo \"\`uname -n\`: \$*\"      >&2; }
    vrun()  { info \"\$*\"; \"\$@\"; }
    $*
    "
    if test @"$GIT_SSH_HOST" = @"localhost"; then
        sh -c "$cmd"
    else
        ssh "$GIT_SSH_HOST" "$cmd"
    fi
}
info()  { echo "$*" >&2; }
error() { echo "ERR: $*" >&2; }
vrun()  { info "$*"; "$@"; }
## --------------------------------------------------------------------------
SCRNAME="`basename "$0"`"
if test @"${SCRNAME}" = @"git-ssh"; then
    case "${1}" in
        ''|-h|--help)
            sed -n 's/^ *#h: \{0,1\}//p' "$0" | sed "s|\\\$0|${SCRNAME}|g"
            echo ""
            sed -n 's/^ *#l: \{0,2\}//p' "$0"
            ;;
        *)
            git_ssh "$@"
            ;;
    esac
fi
# exec git daemon
#     --user=\"\${USER}\"
#     --group=\"\${USER}\"
#     --base-path=/var/lib/git
#     --reuseaddr
#     --informative-errors
#     --verbose
   
