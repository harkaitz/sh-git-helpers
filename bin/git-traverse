#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2023 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 [-m]
#h:
#h: Read a directory list from the standard input and present a fast
#h: git operations menu. With -m only those with changes.
##:
git_traverse() {
    local OPTIND optopt p y only_modified='' mods=''
    while getopts "m" optopt; do
        case $optopt in
            m)  only_modified=y;;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))

    while read -r p; do
        printf "\033[0;32m%s\033[0m\\n" "== Entered ${p} =============="
        if test -n "$only_modified"; then
            mods="`git_sh "$p" 'git status -s || echo fail'`"
            if test ! -n "$mods"; then
                continue
            fi
        fi
        git_sh "${p}" 'git status || true'
        while true; do
            echo -n "q/n(next)/y(shell)/a(auto update)/v(diff)/d(pull)/u(push)/c(commit)/s(status)? "
            read -r y </dev/tty
            case "${y}" in *d*) git_sh "${p}" 'git pull --recurse-submodules=on-demand || true';; esac
            case "${y}" in *a*) git_sh "${p}" 'auto update'        ;; esac
            case "${y}" in *s*) git_sh "${p}" 'git status || true' ;; esac
            case "${y}" in *v*) git_sh "${p}" 'git diff'           ;; esac
            case "${y}" in *c*) git_sh "${p}" 'git commit -a -m - || true';; esac
            case "${y}" in *u*) git_sh "${p}" 'git push origin master --recurse-submodules=on-demand || true';; esac
            case "${y}" in *y*) git_sh "${p}" 'PS1="\\w> " bash --norc || true';; esac
            case "${y}" in *q*) return 0;; esac
            case "${y}" in *n*|'') break;; esac
        done
    done    
}
git_sh() {
    local p="$1"
    shift
    env p="${p}" sh -c 'cd "${p}"; '"$*" < /dev/tty
}
## -------------------------------------------------------------------
SCRNAME="`basename "$0"`"
if test @"${SCRNAME}" = @"git-traverse";then
    case "${1}" in
        -h|--help)
            sed -n 's/^ *#h: \{0,1\}//p' "$0" | sed "s|\\\$0|${SCRNAME}|g"
            echo ""
            sed -n 's/^ *#l: \{0,2\}//p' "$0"
            ;;
        *)
            git_traverse "$@"
            ;;
    esac
fi
